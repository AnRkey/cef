diff --git chrome/browser/app_controller_mac.mm chrome/browser/app_controller_mac.mm
index e2eb5c2c73d0..d08b0a9a2a54 100644
--- chrome/browser/app_controller_mac.mm
+++ chrome/browser/app_controller_mac.mm
@@ -29,6 +29,7 @@
 #include "base/task/thread_pool.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "build/branding_buildflags.h"
+#include "cef/libcef/features/features.h"
 #include "chrome/app/chrome_command_ids.h"
 #include "chrome/browser/apps/app_shim/app_shim_manager_mac.h"
 #include "chrome/browser/apps/app_shim/app_shim_termination_manager.h"
@@ -1194,6 +1195,7 @@ - (void)commandDispatch:(id)sender {
 
 // Run a (background) application in a new tab.
 - (void)executeApplication:(id)sender {
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   NSInteger tag = [sender tag];
   Profile* profile = [self lastProfile];
   DCHECK(profile);
@@ -1202,6 +1204,7 @@ - (void)executeApplication:(id)sender {
          tag < static_cast<int>(applications.size()));
   const extensions::Extension* extension = applications.GetExtension(tag);
   BackgroundModeManager::LaunchBackgroundApplication(profile, extension);
+#endif  // BUILDFLAG(ENABLE_BACKGROUND_MODE)
 }
 
 // Same as |-commandDispatch:|, but executes commands using a disposition
@@ -1599,6 +1602,7 @@ - (NSMenu*)applicationDockMenu:(NSApplication*)sender {
   // TODO(rickcam): Mock out BackgroundApplicationListModel, then add unit
   // tests which use the mock in place of the profile-initialized model.
 
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   // Avoid breaking unit tests which have no profile.
   if (profile) {
     BackgroundApplicationListModel applications(profile);
@@ -1625,6 +1629,7 @@ - (NSMenu*)applicationDockMenu:(NSApplication*)sender {
       }
     }
   }
+#endif  // BUILDFLAG(ENABLE_BACKGROUND_MODE)
 
   return dockMenu;
 }
@@ -1835,11 +1840,13 @@ - (void)handoffActiveURLChanged:(content::WebContents*)webContents {
 namespace {
 
 void UpdateProfileInUse(Profile* profile, Profile::CreateStatus status) {
+#if !BUILDFLAG(ENABLE_CEF)
   if (status == Profile::CREATE_STATUS_INITIALIZED) {
     AppController* controller =
         base::mac::ObjCCastStrict<AppController>([NSApp delegate]);
     [controller windowChangedToProfile:profile];
   }
+#endif  // !BUILDFLAG(ENABLE_CEF)
 }
 
 }  // namespace
diff --git chrome/browser/browser_process.h chrome/browser/browser_process.h
index 1ea08a7ad6ae..473ebde08451 100644
--- chrome/browser/browser_process.h
+++ chrome/browser/browser_process.h
@@ -202,10 +202,12 @@ class BrowserProcess {
   virtual DownloadStatusUpdater* download_status_updater() = 0;
   virtual DownloadRequestLimiter* download_request_limiter() = 0;
 
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   // Returns the object that manages background applications.
   virtual BackgroundModeManager* background_mode_manager() = 0;
   virtual void set_background_mode_manager_for_test(
       std::unique_ptr<BackgroundModeManager> manager) = 0;
+#endif
 
   // Returns the StatusTray, which provides an API for displaying status icons
   // in the system status tray. Returns NULL if status icons are not supported
diff --git chrome/browser/browser_process_impl.cc chrome/browser/browser_process_impl.cc
index 35510d179897..79cdc358903c 100644
--- chrome/browser/browser_process_impl.cc
+++ chrome/browser/browser_process_impl.cc
@@ -957,24 +957,19 @@ DownloadRequestLimiter* BrowserProcessImpl::download_request_limiter() {
   return download_request_limiter_.get();
 }
 
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
 BackgroundModeManager* BrowserProcessImpl::background_mode_manager() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   if (!background_mode_manager_)
     CreateBackgroundModeManager();
   return background_mode_manager_.get();
-#else
-  NOTIMPLEMENTED();
-  return NULL;
-#endif
 }
 
 void BrowserProcessImpl::set_background_mode_manager_for_test(
     std::unique_ptr<BackgroundModeManager> manager) {
-#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   background_mode_manager_ = std::move(manager);
-#endif
 }
+#endif
 
 StatusTray* BrowserProcessImpl::status_tray() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
diff --git chrome/browser/browser_process_impl.h chrome/browser/browser_process_impl.h
index 1d3c566cc59b..230c16644234 100644
--- chrome/browser/browser_process_impl.h
+++ chrome/browser/browser_process_impl.h
@@ -166,9 +166,11 @@ class BrowserProcessImpl : public BrowserProcess,
   void SetApplicationLocale(const std::string& actual_locale) override;
   DownloadStatusUpdater* download_status_updater() override;
   DownloadRequestLimiter* download_request_limiter() override;
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   BackgroundModeManager* background_mode_manager() override;
   void set_background_mode_manager_for_test(
       std::unique_ptr<BackgroundModeManager> manager) override;
+#endif
   StatusTray* status_tray() override;
   safe_browsing::SafeBrowsingService* safe_browsing_service() override;
   subresource_filter::RulesetService* subresource_filter_ruleset_service()
diff --git chrome/browser/lifetime/browser_close_manager.cc chrome/browser/lifetime/browser_close_manager.cc
index e0cafee5eedd..06ded156be3c 100644
--- chrome/browser/lifetime/browser_close_manager.cc
+++ chrome/browser/lifetime/browser_close_manager.cc
@@ -148,12 +148,14 @@ void BrowserCloseManager::CloseBrowsers() {
   // exit can restore all browsers open before exiting.
   ProfileManager::ShutdownSessionServices();
 #endif
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   if (!browser_shutdown::IsTryingToQuit()) {
     BackgroundModeManager* background_mode_manager =
         g_browser_process->background_mode_manager();
     if (background_mode_manager)
       background_mode_manager->SuspendBackgroundMode();
   }
+#endif
 
   // Make a copy of the BrowserList to simplify the case where we need to
   // destroy a Browser during the loop.
diff --git chrome/browser/sessions/session_service.cc chrome/browser/sessions/session_service.cc
index cbddcc52a8f6..02ab085c481c 100644
--- chrome/browser/sessions/session_service.cc
+++ chrome/browser/sessions/session_service.cc
@@ -968,12 +968,19 @@ void SessionService::MaybeDeleteSessionOnlyData() {
   if (!profile() || profile()->AsTestingProfile())
     return;
 
+#if BUILDFLAG(ENABLE_BACKGROUND_MODE)
+  const bool background_mode_active =
+      g_browser_process->background_mode_manager()->IsBackgroundModeActive();
+#else
+  const bool background_mode_active = false;
+#endif
+
   // Clear session data if the last window for a profile has been closed and
   // closing the last window would normally close Chrome, unless background mode
   // is active.  Tests don't have a background_mode_manager.
   if (has_open_trackable_browsers_ ||
       browser_defaults::kBrowserAliveWithNoWindows ||
-      g_browser_process->background_mode_manager()->IsBackgroundModeActive()) {
+      background_mode_active) {
     return;
   }
 
