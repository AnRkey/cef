diff --git content/browser/web_contents/web_contents_view.h content/browser/web_contents/web_contents_view.h
index c046e7f8ba347..e7b627c573e48 100644
--- content/browser/web_contents/web_contents_view.h
+++ content/browser/web_contents/web_contents_view.h
@@ -25,7 +25,7 @@ struct DropData;
 // The `WebContentsView` is an interface that is implemented by the platform-
 // dependent web contents views. The `WebContents` uses this interface to talk
 // to them.
-class WebContentsView {
+class CONTENT_EXPORT WebContentsView {
  public:
   virtual ~WebContentsView() = default;
 
diff --git extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
index 75a2534e3be71..4ae51c0f7d5cf 100644
--- extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
+++ extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
@@ -225,6 +225,8 @@ void MimeHandlerViewGuest::CreateWebContents(
   WebContents::CreateParams params(browser_context(),
                                    guest_site_instance.get());
   params.guest_delegate = this;
+  if (delegate_)
+    delegate_->OverrideWebContentsCreateParams(&params);
   // TODO(erikchen): Fix ownership semantics for guest views.
   // https://crbug.com/832879.
   std::move(callback).Run(
@@ -235,6 +237,10 @@ void MimeHandlerViewGuest::CreateWebContents(
 }
 
 void MimeHandlerViewGuest::DidAttachToEmbedder() {
+  is_guest_attached_ = true;
+  if (delegate_)
+    delegate_->OnGuestAttached();
+
   DCHECK(stream_->handler_url().SchemeIs(extensions::kExtensionScheme));
   web_contents()->GetController().LoadURL(
       stream_->handler_url(), content::Referrer(),
@@ -261,6 +267,11 @@ bool MimeHandlerViewGuest::ZoomPropagatesFromEmbedderToGuest() const {
   return false;
 }
 
+void MimeHandlerViewGuest::WillDestroy() {
+  if (is_guest_attached_ && delegate_)
+    delegate_->OnGuestDetached();
+}
+
 WebContents* MimeHandlerViewGuest::OpenURLFromTab(
     WebContents* source,
     const content::OpenURLParams& params) {
diff --git extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h
index 26dc86a7534d9..7fd27ebf28dd2 100644
--- extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h
+++ extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h
@@ -142,6 +142,7 @@ class MimeHandlerViewGuest
   void DidInitialize(const base::Value::Dict& create_params) final;
   void EmbedderFullscreenToggled(bool entered_fullscreen) final;
   bool ZoomPropagatesFromEmbedderToGuest() const final;
+  void WillDestroy() override;
 
   // WebContentsDelegate implementation.
   content::WebContents* OpenURLFromTab(
@@ -199,6 +200,7 @@ class MimeHandlerViewGuest
       content::ChildProcessHost::kInvalidUniqueID, MSG_ROUTING_NONE};
   int embedder_widget_routing_id_ = MSG_ROUTING_NONE;
 
+  bool is_guest_attached_ = false;
   bool is_guest_fullscreen_ = false;
   bool is_embedder_fullscreen_ = false;
   bool plugin_can_save_ = false;
diff --git extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest_delegate.h extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest_delegate.h
index 3aaeab0baf51e..4f818abde1c1a 100644
--- extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest_delegate.h
+++ extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest_delegate.h
@@ -7,6 +7,8 @@
 
 #include <string>
 
+#include "content/public/browser/web_contents.h"
+
 namespace content {
 class RenderFrameHost;
 struct ContextMenuParams;
@@ -25,6 +27,14 @@ class MimeHandlerViewGuestDelegate {
 
   virtual ~MimeHandlerViewGuestDelegate() {}
 
+  // Provides an opportunity to supply a custom view implementation.
+  virtual void OverrideWebContentsCreateParams(
+      content::WebContents::CreateParams* params) {}
+
+  // Called when a guest is attached or detached.
+  virtual void OnGuestAttached() {}
+  virtual void OnGuestDetached() {}
+
   // Handles context menu, or returns false if unhandled.
   //
   // The `render_frame_host` represents the frame that requests the context menu
